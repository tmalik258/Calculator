/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package calculator;

import java.awt.Color;
import java.math.BigDecimal;
import java.util.*;
import javax.swing.Action;
import javax.swing.plaf.metal.MetalButtonUI;

/**
 *
 * @author talha
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Panel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        btnper = new javax.swing.JButton();
        btnCE = new javax.swing.JButton();
        btnC = new javax.swing.JButton();
        btnErase = new javax.swing.JButton();
        btnDivide = new javax.swing.JButton();
        btnratio = new javax.swing.JButton();
        btnSquare = new javax.swing.JButton();
        btnsqrt = new javax.swing.JButton();
        btn7 = new javax.swing.JButton();
        btn8 = new javax.swing.JButton();
        btn9 = new javax.swing.JButton();
        btn4 = new javax.swing.JButton();
        btn1 = new javax.swing.JButton();
        btnplusminus = new javax.swing.JButton();
        btn5 = new javax.swing.JButton();
        btn6 = new javax.swing.JButton();
        btn2 = new javax.swing.JButton();
        btn3 = new javax.swing.JButton();
        btn0 = new javax.swing.JButton();
        btnDecimal = new javax.swing.JButton();
        btnMultiply = new javax.swing.JButton();
        btnMinus = new javax.swing.JButton();
        btnPlus = new javax.swing.JButton();
        btnEqualsTo = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jToggleButton1 = new javax.swing.JToggleButton();
        smallTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Calculator");
        setBackground(new java.awt.Color(0, 0, 0));
        setFocusable(false);
        setForeground(new java.awt.Color(102, 102, 102));
        setIconImages(null);
        setName("MainFrame"); // NOI18N
        setResizable(false);

        Panel1.setBackground(new java.awt.Color(65, 65, 65));

        jTextField1.setEditable(false);
        jTextField1.setBackground(new java.awt.Color(65, 65, 65));
        jTextField1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 49)); // NOI18N
        jTextField1.setForeground(new java.awt.Color(255, 255, 255));
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextField1.setText("0");
        jTextField1.setAutoscrolls(false);
        jTextField1.setBorder(null);
        jTextField1.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jTextField1.setDebugGraphicsOptions(javax.swing.DebugGraphics.BUFFERED_OPTION);
        jTextField1.setFocusCycleRoot(true);
        jTextField1.setFocusTraversalPolicyProvider(true);
        jTextField1.setHighlighter(null);
        jTextField1.setMargin(new java.awt.Insets(0, 6, 0, 6));
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
        });

        btnper.setBackground(new java.awt.Color(51, 51, 51));
        btnper.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnper.setForeground(new java.awt.Color(255, 255, 255));
        btnper.setText("<html>\n%\n</html>");
        btnper.setBorder(null);
        btnper.setFocusPainted(false);
        btnper.setHideActionText(true);
        btnper.setIconTextGap(3);
        btnper.setMargin(new java.awt.Insets(2, 10, 1, 10));
        btnper.setRequestFocusEnabled(false);
        btnper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnperActionPerformed(evt);
            }
        });

        btnCE.setBackground(new java.awt.Color(51, 51, 51));
        btnCE.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnCE.setForeground(new java.awt.Color(255, 255, 255));
        btnCE.setText("<html>\nCE\n</html>");
        btnCE.setBorder(null);
        btnCE.setFocusPainted(false);
        btnCE.setHideActionText(true);
        btnCE.setIconTextGap(3);
        btnCE.setMargin(new java.awt.Insets(2, 10, 1, 10));
        btnCE.setRequestFocusEnabled(false);
        btnCE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCEActionPerformed(evt);
            }
        });

        btnC.setBackground(new java.awt.Color(51, 51, 51));
        btnC.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnC.setForeground(new java.awt.Color(255, 255, 255));
        btnC.setText("<html>\nC\n</html>");
        btnC.setBorder(null);
        btnC.setFocusPainted(false);
        btnC.setHideActionText(true);
        btnC.setRequestFocusEnabled(false);
        btnC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCActionPerformed(evt);
            }
        });

        btnErase.setBackground(new java.awt.Color(51, 51, 51));
        btnErase.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnErase.setForeground(new java.awt.Color(255, 255, 255));
        btnErase.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/remove.png"))); // NOI18N
        btnErase.setAlignmentY(0.0F);
        btnErase.setBorder(null);
        btnErase.setFocusPainted(false);
        btnErase.setHideActionText(true);
        btnErase.setRequestFocusEnabled(false);
        btnErase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEraseActionPerformed(evt);
            }
        });

        btnDivide.setBackground(new java.awt.Color(51, 51, 51));
        btnDivide.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btnDivide.setForeground(new java.awt.Color(255, 255, 255));
        btnDivide.setText("<html>\n÷\n</html>");
        btnDivide.setBorder(null);
        btnDivide.setBorderPainted(false);
        btnDivide.setFocusPainted(false);
        btnDivide.setHideActionText(true);
        btnDivide.setRequestFocusEnabled(false);
        btnDivide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDivideActionPerformed(evt);
            }
        });

        btnratio.setBackground(new java.awt.Color(51, 51, 51));
        btnratio.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnratio.setForeground(new java.awt.Color(255, 255, 255));
        btnratio.setText("<html>\n1/x\n</html>");
        btnratio.setBorder(null);
        btnratio.setFocusPainted(false);
        btnratio.setHideActionText(true);
        btnratio.setRequestFocusEnabled(false);
        btnratio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnratioActionPerformed(evt);
            }
        });

        btnSquare.setBackground(new java.awt.Color(51, 51, 51));
        btnSquare.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnSquare.setForeground(new java.awt.Color(255, 255, 255));
        btnSquare.setText("<html>\nx<sup>2</sup>\n</html>");
        btnSquare.setBorder(null);
        btnSquare.setFocusPainted(false);
        btnSquare.setHideActionText(true);
        btnSquare.setRequestFocusEnabled(false);
        btnSquare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSquareActionPerformed(evt);
            }
        });

        btnsqrt.setBackground(new java.awt.Color(51, 51, 51));
        btnsqrt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnsqrt.setForeground(new java.awt.Color(255, 255, 255));
        btnsqrt.setText("<html>\n<sup >2</sup>√x\n</html>");
        btnsqrt.setBorder(null);
        btnsqrt.setFocusPainted(false);
        btnsqrt.setHideActionText(true);
        btnsqrt.setRequestFocusEnabled(false);
        btnsqrt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsqrtActionPerformed(evt);
            }
        });

        btn7.setBackground(new java.awt.Color(0, 0, 0));
        btn7.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        btn7.setForeground(new java.awt.Color(255, 255, 255));
        btn7.setText("7");
        btn7.setBorder(null);
        btn7.setBorderPainted(false);
        btn7.setFocusPainted(false);
        btn7.setRequestFocusEnabled(false);
        btn7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn7ActionPerformed(evt);
            }
        });

        btn8.setBackground(new java.awt.Color(0, 0, 0));
        btn8.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        btn8.setForeground(new java.awt.Color(255, 255, 255));
        btn8.setText("8");
        btn8.setBorder(null);
        btn8.setBorderPainted(false);
        btn8.setFocusPainted(false);
        btn8.setRequestFocusEnabled(false);
        btn8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn8ActionPerformed(evt);
            }
        });

        btn9.setBackground(new java.awt.Color(0, 0, 0));
        btn9.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        btn9.setForeground(new java.awt.Color(255, 255, 255));
        btn9.setText("9");
        btn9.setBorder(null);
        btn9.setBorderPainted(false);
        btn9.setFocusPainted(false);
        btn9.setRequestFocusEnabled(false);
        btn9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn9ActionPerformed(evt);
            }
        });

        btn4.setBackground(new java.awt.Color(0, 0, 0));
        btn4.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        btn4.setForeground(new java.awt.Color(255, 255, 255));
        btn4.setText("4");
        btn4.setBorder(null);
        btn4.setFocusPainted(false);
        btn4.setHideActionText(true);
        btn4.setRequestFocusEnabled(false);
        btn4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn4ActionPerformed(evt);
            }
        });

        btn1.setBackground(new java.awt.Color(0, 0, 0));
        btn1.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        btn1.setForeground(new java.awt.Color(255, 255, 255));
        btn1.setText("1");
        btn1.setBorder(null);
        btn1.setFocusPainted(false);
        btn1.setHideActionText(true);
        btn1.setRequestFocusEnabled(false);
        btn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn1ActionPerformed(evt);
            }
        });

        btnplusminus.setBackground(new java.awt.Color(0, 0, 0));
        btnplusminus.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        btnplusminus.setForeground(new java.awt.Color(255, 255, 255));
        btnplusminus.setText("<html>\n+/-\n</html>");
        btnplusminus.setBorder(null);
        btnplusminus.setFocusPainted(false);
        btnplusminus.setHideActionText(true);
        btnplusminus.setRequestFocusEnabled(false);
        btnplusminus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnplusminusActionPerformed(evt);
            }
        });

        btn5.setBackground(new java.awt.Color(0, 0, 0));
        btn5.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        btn5.setForeground(new java.awt.Color(255, 255, 255));
        btn5.setText("5");
        btn5.setBorder(null);
        btn5.setFocusPainted(false);
        btn5.setHideActionText(true);
        btn5.setRequestFocusEnabled(false);
        btn5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn5ActionPerformed(evt);
            }
        });

        btn6.setBackground(new java.awt.Color(0, 0, 0));
        btn6.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        btn6.setForeground(new java.awt.Color(255, 255, 255));
        btn6.setText("6");
        btn6.setBorder(null);
        btn6.setFocusPainted(false);
        btn6.setHideActionText(true);
        btn6.setRequestFocusEnabled(false);
        btn6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn6ActionPerformed(evt);
            }
        });

        btn2.setBackground(new java.awt.Color(0, 0, 0));
        btn2.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        btn2.setForeground(new java.awt.Color(255, 255, 255));
        btn2.setText("2");
        btn2.setBorder(null);
        btn2.setFocusPainted(false);
        btn2.setHideActionText(true);
        btn2.setRequestFocusEnabled(false);
        btn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn2ActionPerformed(evt);
            }
        });

        btn3.setBackground(new java.awt.Color(0, 0, 0));
        btn3.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        btn3.setForeground(new java.awt.Color(255, 255, 255));
        btn3.setText("3");
        btn3.setBorder(null);
        btn3.setFocusPainted(false);
        btn3.setHideActionText(true);
        btn3.setRequestFocusEnabled(false);
        btn3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn3ActionPerformed(evt);
            }
        });

        btn0.setBackground(new java.awt.Color(0, 0, 0));
        btn0.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        btn0.setForeground(new java.awt.Color(255, 255, 255));
        btn0.setText("0");
        btn0.setBorder(null);
        btn0.setFocusPainted(false);
        btn0.setHideActionText(true);
        btn0.setRequestFocusEnabled(false);
        btn0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn0ActionPerformed(evt);
            }
        });

        btnDecimal.setBackground(new java.awt.Color(0, 0, 0));
        btnDecimal.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        btnDecimal.setForeground(new java.awt.Color(255, 255, 255));
        btnDecimal.setText("<html>\n.\n</html>");
        btnDecimal.setBorder(null);
        btnDecimal.setFocusPainted(false);
        btnDecimal.setHideActionText(true);
        btnDecimal.setRequestFocusEnabled(false);
        btnDecimal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecimalActionPerformed(evt);
            }
        });

        btnMultiply.setBackground(new java.awt.Color(51, 51, 51));
        btnMultiply.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btnMultiply.setForeground(new java.awt.Color(255, 255, 255));
        btnMultiply.setText("<html>\n×\n</html>");
        btnMultiply.setBorder(null);
        btnMultiply.setFocusPainted(false);
        btnMultiply.setHideActionText(true);
        btnMultiply.setRequestFocusEnabled(false);
        btnMultiply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMultiplyActionPerformed(evt);
            }
        });

        btnMinus.setBackground(new java.awt.Color(51, 51, 51));
        btnMinus.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btnMinus.setForeground(new java.awt.Color(255, 255, 255));
        btnMinus.setText("<html>\n-\n</html>");
        btnMinus.setBorder(null);
        btnMinus.setFocusPainted(false);
        btnMinus.setHideActionText(true);
        btnMinus.setRequestFocusEnabled(false);
        btnMinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinusActionPerformed(evt);
            }
        });

        btnPlus.setBackground(new java.awt.Color(51, 51, 51));
        btnPlus.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btnPlus.setForeground(new java.awt.Color(255, 255, 255));
        btnPlus.setText("<html>\n+\n</html>");
        btnPlus.setBorder(null);
        btnPlus.setFocusPainted(false);
        btnPlus.setHideActionText(true);
        btnPlus.setRequestFocusEnabled(false);
        btnPlus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlusActionPerformed(evt);
            }
        });

        btnEqualsTo.setBackground(new java.awt.Color(102, 0, 102));
        btnEqualsTo.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btnEqualsTo.setForeground(new java.awt.Color(255, 255, 255));
        btnEqualsTo.setText("<html>\n=\n</html>");
        btnEqualsTo.setBorder(null);
        btnEqualsTo.setFocusPainted(false);
        btnEqualsTo.setHideActionText(true);
        btnEqualsTo.setRequestFocusEnabled(false);
        btnEqualsTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEqualsToActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("SimSun", 1, 29)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Standard");

        jToggleButton1.setBackground(new java.awt.Color(0, 0, 0));
        jToggleButton1.setForeground(new java.awt.Color(255, 255, 255));
        jToggleButton1.setText("Black Theme");
        jToggleButton1.setBorderPainted(false);
        jToggleButton1.setFocusPainted(false);
        jToggleButton1.setFocusable(false);
        jToggleButton1.setRequestFocusEnabled(false);
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        smallTextField.setBackground(new java.awt.Color(65, 65, 65));
        smallTextField.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        smallTextField.setForeground(new java.awt.Color(194, 194, 194));
        smallTextField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        smallTextField.setBorder(null);
        smallTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        smallTextField.setFocusable(false);
        smallTextField.setRequestFocusEnabled(false);

        javax.swing.GroupLayout Panel1Layout = new javax.swing.GroupLayout(Panel1);
        Panel1.setLayout(Panel1Layout);
        Panel1Layout.setHorizontalGroup(
            Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(Panel1Layout.createSequentialGroup()
                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Panel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnper, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCE, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnC, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnErase, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(Panel1Layout.createSequentialGroup()
                        .addGap(372, 372, 372)
                        .addComponent(btnDivide, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(Panel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnratio, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSquare, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnsqrt, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(Panel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btn7, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn8, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn9, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(Panel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btn4, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn5, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn6, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(Panel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btn1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn2, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn3, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(Panel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnplusminus, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn0, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDecimal, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(Panel1Layout.createSequentialGroup()
                        .addGap(372, 372, 372)
                        .addComponent(btnMultiply, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(Panel1Layout.createSequentialGroup()
                        .addGap(372, 372, 372)
                        .addComponent(btnMinus, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(Panel1Layout.createSequentialGroup()
                        .addGap(372, 372, 372)
                        .addComponent(btnPlus, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(Panel1Layout.createSequentialGroup()
                        .addGap(372, 372, 372)
                        .addComponent(btnEqualsTo, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 6, Short.MAX_VALUE))
            .addGroup(Panel1Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(smallTextField)
                    .addGroup(Panel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jToggleButton1)))
                .addContainerGap())
        );
        Panel1Layout.setVerticalGroup(
            Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jToggleButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(smallTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Panel1Layout.createSequentialGroup()
                        .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCE, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnper, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnC, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(Panel1Layout.createSequentialGroup()
                                .addComponent(btnratio, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn7, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn4, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnplusminus, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnSquare, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnsqrt, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(Panel1Layout.createSequentialGroup()
                                .addGap(62, 62, 62)
                                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btn8, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btn9, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(Panel1Layout.createSequentialGroup()
                                .addGap(124, 124, 124)
                                .addComponent(btn5, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(Panel1Layout.createSequentialGroup()
                                .addGap(124, 124, 124)
                                .addComponent(btn6, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(Panel1Layout.createSequentialGroup()
                                .addGap(186, 186, 186)
                                .addComponent(btn2, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(Panel1Layout.createSequentialGroup()
                                .addGap(186, 186, 186)
                                .addComponent(btn3, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(Panel1Layout.createSequentialGroup()
                                .addGap(248, 248, 248)
                                .addComponent(btn0, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(Panel1Layout.createSequentialGroup()
                                .addGap(248, 248, 248)
                                .addComponent(btnDecimal, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(Panel1Layout.createSequentialGroup()
                        .addComponent(btnErase, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDivide, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMultiply, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMinus, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPlus, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEqualsTo, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
private double value1=0, value2=0;
private char operator;
private boolean decimal=false, power=false, equalsToButton=false, errorSolvedInMultiplication=false, plusMinus=false;
private boolean sqRt=false, sqpSqrt=false,sqrtSqp=false, zeroErrorRatio=false ,operatorChanged=false;
private String str, limit;
private double result=0;
private long expression=0;
//private enum Operator{p,s,m,d}
//  ErrorSolvedMultiplication is for equation 4+2=6 +2=8

    private void btnEraseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEraseActionPerformed
        // TODO add your handling code here:
        if(zeroErrorRatio){
            jTextField1.setText("0");
            zeroErrorRatio=false;
            ratioDisabledOption(true);
        }
        if(equalsToButton) {equalsToButton=false; value1=0; smallTextField.setText("");}
        String text=jTextField1.getText();
        str=eraseRemover(text);
        jTextField1.setText(str);
        if(text.contains("-")){if(str.length()==1)jTextField1.setText("0");  plusMinus=false;   }
    }//GEN-LAST:event_btnEraseActionPerformed

    private void btnDivideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDivideActionPerformed
        // TODO add your handling code here:
        if(equalsToButton) {equalsToButton=false; value1=0;}
        String text=jTextField1.getText(), sText=smallTextField.getText();
        if(operatorChanged){
            operator='÷';
            str=textFieldOperatorChanger(sText);
            smallTextField.setText(""+str+operator);
            return;
        }
        operatorChecker(text);
        operator='÷';
        operatorChanged=true;
        if(decimal)
            smallTextField.setText(value1+" "+operator);
        else{
            expression=(long) value1;
            if(sqRt||power||sqpSqrt||sqrtSqp){
                smallTextField.setText(sText+" "+text+" "+operator);
                power=false;
                sqRt=false;
                sqpSqrt=false;
                sqrtSqp=false;}
            else
                smallTextField.setText(expression+" "+operator);
        }
        jTextField1.setText("0");
    }//GEN-LAST:event_btnDivideActionPerformed

    private void btnMultiplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMultiplyActionPerformed
        // TODO add your handling code here:
        if(equalsToButton) {equalsToButton=false; value1=0;}
        if(errorSolvedInMultiplication){if(value1==0)value1=1; errorSolvedInMultiplication=false;}
        String text=jTextField1.getText(), sText=smallTextField.getText();
        if(operatorChanged){
            operator='x';
            str=textFieldOperatorChanger(sText);
            smallTextField.setText(""+str+operator);
            return;
        }
        operatorChecker(text);
        operator='x';
        operatorChanged=true;
        if(decimal)
            smallTextField.setText(value1+" "+operator);
        else{
            expression=(long) value1;
            if(sqRt||power||sqpSqrt||sqrtSqp){
                smallTextField.setText(sText+" "+text+" "+operator);
                power=false;
                sqRt=false;
                sqpSqrt=false;
                sqrtSqp=false;}
            else
            smallTextField.setText(expression+" "+operator);
        }
        jTextField1.setText("0");
    }//GEN-LAST:event_btnMultiplyActionPerformed

    private void btnMinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinusActionPerformed
        // TODO add your handling code here:
        if(equalsToButton) {equalsToButton=false; value1=0;}
        String text=jTextField1.getText(), sText=smallTextField.getText();
        if(operatorChanged){
            operator='-';
            str=textFieldOperatorChanger(sText);
            smallTextField.setText(""+str+operator);
            return;
        }
        operatorChecker(text);
        operator='-';
        operatorChanged=true;
        if(decimal)
            smallTextField.setText(value1+" "+operator);
        else{
            expression=(long) value1;
            if(sqRt||power||sqpSqrt||sqrtSqp){
                smallTextField.setText(sText+" "+text+" "+operator);
                power=false;
                sqRt=false;
                sqpSqrt=false;
                sqrtSqp=false;}
            else
            smallTextField.setText(expression+" "+operator);
        }
        jTextField1.setText("0");
    }//GEN-LAST:event_btnMinusActionPerformed

    private void btnPlusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlusActionPerformed
        // TODO add your handling code here:
        if(equalsToButton) {equalsToButton=false; value1=0;}
        String text=jTextField1.getText(), sText=smallTextField.getText();
        if(operatorChanged){
            operator='+';
            str=textFieldOperatorChanger(sText);
            smallTextField.setText(""+str+operator);
            return;
        }
        operatorChecker(text);
        operator='+';
        operatorChanged=true;
        if(decimal)
            smallTextField.setText(value1+" "+operator);
        else{
            expression=(long) value1;
            if(sqRt||power||sqpSqrt||sqrtSqp){
                smallTextField.setText(sText+" "+text+" "+operator);
                power=false;
                sqRt=false;
                sqpSqrt=false;
                sqrtSqp=false;}
            else
                smallTextField.setText(expression+" "+operator);
        }
        jTextField1.setText("0");
    }//GEN-LAST:event_btnPlusActionPerformed

    private void btnEqualsToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEqualsToActionPerformed
        // TODO add your handling code here:
        if(operatorChanged)
            operatorChanged=false;
        if(equalsToButton)
            smallTextField.setText("");
        if("0".equals(smallTextField.getText()))
            smallTextField.setText("");
        String text=jTextField1.getText(), sText=smallTextField.getText();
        if(sqpSqrt){
            str=lastCharacterRemover(text);
            value2=Double.parseDouble(str);
        }
        else if(sqrtSqp){
            str=lastCharacterRemover(text);
            value2=Double.parseDouble(str);
        }
        else if(power){
            str=lastCharacterRemover(text);
            value2=Double.parseDouble(str);
        }
        else if(sqRt){
                str=lastCharacterRemover(text);
                value2=Double.parseDouble(str);
        }
        else{
                value2=Double.parseDouble(text);
        }
        equalsToCalculation();
        if(decimal)
            smallTextField.setText(sText+" "+value2+" =");
        else{
            expression= (long) value2;
            if(sqRt||power||sqpSqrt||sqrtSqp){
                smallTextField.setText(sText+" "+text+" =");
                if(sqrtSqp)
                    sqrtSqp=false;
                else if(sqpSqrt)
                    sqpSqrt=false;
                else if(power)
                    power=false;
                else if(sqRt)
                    sqRt=false;
            }
            else
                smallTextField.setText(sText+" "+expression+" =");
        }
        if(equalsToButton)
            jTextField1.setText(text);
        equalsToButton=true;
    }//GEN-LAST:event_btnEqualsToActionPerformed

    private void btn0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn0ActionPerformed
        // TODO add your handling code here:
        if(operatorChanged)
            operatorChanged=false;
        if(zeroErrorRatio){
            jTextField1.setText("");
            ratioDisabledOption(true);
            zeroErrorRatio=false;
        }
        if((!power)&&(!sqRt)){
            equalsToButton();
            String text=jTextField1.getText();
            if(text.length()==14){
                return;
            }
            numberInput("0", text);
        }
    }//GEN-LAST:event_btn0ActionPerformed

    private void btn7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn7ActionPerformed
        // TODO add your handling code here:
        if(operatorChanged)
            operatorChanged=false;
        if(zeroErrorRatio){
            jTextField1.setText("");
            ratioDisabledOption(true);
            zeroErrorRatio=false;
        }
        if((!power)&&(!sqRt)){
            equalsToButton();
            String text=jTextField1.getText();
            if(text.length()==14){
                return;
            }
            numberInput("7", text);
        }
    }//GEN-LAST:event_btn7ActionPerformed

    private void btn8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn8ActionPerformed
        // TODO add your handling code here:
        if(operatorChanged)
            operatorChanged=false;
        if(zeroErrorRatio){
            jTextField1.setText("");
            ratioDisabledOption(true);
            zeroErrorRatio=false;
        }
        if((!power)&&(!sqRt)){
            equalsToButton();
            
            String text=jTextField1.getText();
            if(text.length()==14){
                return;
            }
            numberInput("8", text);
        }
    }//GEN-LAST:event_btn8ActionPerformed

    private void btn9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn9ActionPerformed
        // TODO add your handling code here:
        if(operatorChanged)
            operatorChanged=false;
        if(zeroErrorRatio){
            jTextField1.setText("");
            ratioDisabledOption(true);
            zeroErrorRatio=false;
        }
        if((!power)&&(!sqRt)){
            equalsToButton();
            
            String text=jTextField1.getText();
            if(text.length()==14){
                return;
            }
            numberInput("9", text);
        }
    }//GEN-LAST:event_btn9ActionPerformed

    private void btn4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn4ActionPerformed
        // TODO add your handling code here:
        if(operatorChanged)
            operatorChanged=false;
        if(zeroErrorRatio){
            jTextField1.setText("");
            ratioDisabledOption(true);
            zeroErrorRatio=false;
        }
        if((!power)&&(!sqRt)){
            equalsToButton();
            String text=jTextField1.getText();
            if(text.length()==14){
                return;
            }
            numberInput("4", text);
        }
    }//GEN-LAST:event_btn4ActionPerformed

    private void btn5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn5ActionPerformed
        // TODO add your handling code here:
        if(operatorChanged)
            operatorChanged=false;
        if(zeroErrorRatio){
            jTextField1.setText("");
            ratioDisabledOption(true);
            zeroErrorRatio=false;
        }
        if((!power)&&(!sqRt)){
            equalsToButton();
            String text=jTextField1.getText();
            if(text.length()==14){
                return;
            }
            numberInput("5", text);
        }
    }//GEN-LAST:event_btn5ActionPerformed

    private void btn6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn6ActionPerformed
        // TODO add your handling code here:
        if(operatorChanged)
            operatorChanged=false;
        if(zeroErrorRatio){
            jTextField1.setText("");
            ratioDisabledOption(true);
            zeroErrorRatio=false;
        }
        if((!power)&&(!sqRt)){
            equalsToButton();
            String text=jTextField1.getText();
            if(text.length()==14){
                return;
            }
            numberInput("6", text);
        }
    }//GEN-LAST:event_btn6ActionPerformed

    private void btn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn1ActionPerformed
        // TODO add your handling code here:
        if(operatorChanged)
            operatorChanged=false;
        if(zeroErrorRatio){
            jTextField1.setText("");
            ratioDisabledOption(true);
            zeroErrorRatio=false;
        }
        if((!power)&&(!sqRt)){
            equalsToButton();
            String text=jTextField1.getText();
            if(text.length()==14){
                return;
            }
            numberInput("1", text);
        }
    }//GEN-LAST:event_btn1ActionPerformed

    private void btn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn2ActionPerformed
        // TODO add your handling code here:
        if(operatorChanged)
            operatorChanged=false;
        if(zeroErrorRatio){
            jTextField1.setText("");
            ratioDisabledOption(true);
            zeroErrorRatio=false;
        }
        if((!power)&&(!sqRt)){
            equalsToButton();
            String text=jTextField1.getText();
            if(text.length()==14){
                return;
            }
            numberInput("2", text);
        }
    }//GEN-LAST:event_btn2ActionPerformed

    private void btn3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn3ActionPerformed
        // TODO add your handling code here:
        if(operatorChanged)
            operatorChanged=false;
        if(zeroErrorRatio){
            jTextField1.setText("");
            ratioDisabledOption(true);
            zeroErrorRatio=false;
        }
        if((!power)&&(!sqRt)){
            equalsToButton();
            String text=jTextField1.getText();
            if(text.length()==14){
                return;
            }
            numberInput("3", text);
        }
    }//GEN-LAST:event_btn3ActionPerformed

    private void btnDecimalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecimalActionPerformed
        // TODO add your handling code here:
        if(operatorChanged)
            operatorChanged=false;
        if((!power)&&(!sqRt)){
            if(equalsToButton){
                jTextField1.setText("0");
                equalsToButton=false;
            }
            String text=jTextField1.getText();
            
            if(text.contains(".")){
                jTextField1.setText(text);
                decimal=true;
            } else {
                jTextField1.setText(text+".");
                decimal=true;
            }
        }
    }//GEN-LAST:event_btnDecimalActionPerformed

    private void btnCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCActionPerformed
        // TODO add your handling code here:
        errorSolvedInMultiplication=false;
        value1=0;
        operator='&';
        smallTextField.setText("");
        clear();
    }//GEN-LAST:event_btnCActionPerformed

    private void btnCEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCEActionPerformed
        // TODO add your handling code here:
        clear();
    }//GEN-LAST:event_btnCEActionPerformed

    private void btnplusminusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnplusminusActionPerformed
        // TODO add your handling code here:
        if(operatorChanged)
            operatorChanged=false;
        if(equalsToButton)  equalsToButton=false;
        
        String text=jTextField1.getText();
        
        if(!"0".equals(text)||!"".equals(text)){
            if(!plusMinus){
                jTextField1.setText("-"+text);
                plusMinus=true;
            }
            else if(text.contains("-")){
                String[] strSplit=text.split("");
                ArrayList<String>  strlist=new ArrayList<>(Arrays.asList(strSplit));
                strlist.remove(strlist.get(0));
                String str = "";
		for (String temp : strlist) {
			str+= temp;
		}
                text=str;
                jTextField1.setText(text);
                plusMinus=false;
            }
        }
    }//GEN-LAST:event_btnplusminusActionPerformed

    private void btnSquareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSquareActionPerformed
        // TODO add your handling code here:
        if(operatorChanged)
            operatorChanged=false;
        String text=jTextField1.getText();
        if(!power){
            if(sqRt)
               sqrtSqp=true;
            jTextField1.setText("("+text+")"+"\u00B2");
            power=true;
        }
    }//GEN-LAST:event_btnSquareActionPerformed

    private void btnsqrtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsqrtActionPerformed
        // TODO add your handling code here:
        if(operatorChanged)
            operatorChanged=false;
        if(equalsToButton){
            smallTextField.setText("");
        }
        String text=jTextField1.getText();
        if(!sqRt){
            if(power)
               sqpSqrt=true;
            jTextField1.setText("√"+"("+text+")");
            sqRt=true;
        }
    }//GEN-LAST:event_btnsqrtActionPerformed

    private void btnperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnperActionPerformed
        // TODO add your handling code here:
        if(operatorChanged)
            operatorChanged=false;
        double temp=0;
        if(value1!=0){
            String text=jTextField1.getText();
            if(sqrtSqp){
                str=lastCharacterRemover(text);
                temp= Math.pow(Math.sqrt(Double.parseDouble(str)), 2);
                temp/=100;
                power=false;
                sqRt=false;
            }
            else if(sqpSqrt){
                str=lastCharacterRemover(text);
                temp=  Math.sqrt(Math.pow(Double.parseDouble(str), 2));
                temp/=100;
                power=false;
                sqRt=false;
            }
            else if(power){
                str=lastCharacterRemover(text);
                temp= Math.pow(Double.parseDouble(str), 2);
                temp/=100;
                power=false;
            }
            else if(sqRt){
                str=lastCharacterRemover(text);
                temp= Math.sqrt(Double.parseDouble(str));
                temp/=100;
                sqRt=false;
            }
            else
                temp= Double.parseDouble(text)/100;
            BigDecimal b1;
            b1= new BigDecimal(temp);
            if(b1.precision()>7){
                jTextField1.setText(String.format("%.7f", temp));
            }
            else{
                jTextField1.setText(""+temp);
            }
            decimal=true;
        }
        else{
            smallTextField.setText("0");
            jTextField1.setText("0");
        }
        power=false;
        sqRt=false;
        sqrtSqp=false;
        sqpSqrt=false;
    }//GEN-LAST:event_btnperActionPerformed

    private void btnratioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnratioActionPerformed
        // TODO add your handling code here:
        if(operatorChanged)
            operatorChanged=false;
        double temp;
        String text=jTextField1.getText();
        decimal=true;
        if(sqpSqrt){
            str=lastCharacterRemover(text);
            temp= Math.pow(Double.parseDouble(str), 2);
            temp= Math.sqrt(temp);
            temp=1/temp;
            power=false;
            sqRt=false;
        }
        else if(sqrtSqp){
            str=lastCharacterRemover(text);
            temp= Math.sqrt(Double.parseDouble(str));
            temp= Math.pow(temp, 2);
            temp=1/temp;
            power=false;
            sqRt=false;
        }
        else if(power){
            str=lastCharacterRemover(text);
            temp= Math.pow(Double.parseDouble(str), 2);
            temp=1/temp;
            power=false;
        }
        else if(sqRt){
            str=lastCharacterRemover(text);
            temp= Math.sqrt(Double.parseDouble(str));
            temp=1/temp;
            sqRt=false;
        }
        else{
            temp=1/Double.parseDouble(text);
        }
        if("Infinity".equals(String.valueOf(temp))){
            jTextField1.setText("Cannot divide by zero");
            zeroErrorRatio=true;
            ratioDisabledOption(false);
            colorChanger();
            decimal=false;
        }
        else
            jTextField1.setText(""+temp);
    }//GEN-LAST:event_btnratioActionPerformed

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
        // TODO add your handling code here:
        char ch = evt.getKeyChar();
        String s=Character.toString(ch);
        
        //          NUMBERS INPUT
        if (ch >= '0' &&ch <= '9') {
            if(operatorChanged)
                operatorChanged=false;
            if(zeroErrorRatio){
                jTextField1.setText("");
                ratioDisabledOption(true);
                zeroErrorRatio=false;
            }
            if(!power){
                equalsToButton();
            
                String text=jTextField1.getText();
                if(text.length()==14)
                    return;
                numberInput(s, text);
            }
        }
        
        //          EQUALS TO
        else if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            if(operatorChanged)
                operatorChanged=false;
            if(equalsToButton)
                smallTextField.setText("");
            if("0".equals(smallTextField.getText()))
                smallTextField.setText("");
            String text=jTextField1.getText(), sText=smallTextField.getText();
            if(power){
                str=lastCharacterRemover(text);
                value2=Double.parseDouble(str);
            }
            else{
                    value2=Double.parseDouble(text);
            }
            equalsToCalculation();
            if(decimal)
            smallTextField.setText(sText+" "+value2+" =");
            else{
                expression= (long) value2;
                if(sqRt||power||sqpSqrt||sqrtSqp){
                    smallTextField.setText(sText+" "+text+" =");
                    power=false;
                    sqRt=false;
                    sqpSqrt=false;
                    sqrtSqp=false;}
                else
                    smallTextField.setText(sText+" "+expression+" =");
            }
            if(equalsToButton)
                jTextField1.setText(text);
            equalsToButton=true;
        }
        
        //          OPERATORS
        else if(ch>='*'&&ch<='/'){
            String sText=smallTextField.getText();
            switch(ch){
                case '+' -> {
                    if(equalsToButton) {equalsToButton=false; value1=0;}
                    String text=jTextField1.getText();
                    if(operatorChanged){
                        operator='+';
                        str=textFieldOperatorChanger(sText);
                        smallTextField.setText(""+str+operator);
                        return;
                    }
                    operatorChecker(text);
                    operator='+';
                    operatorChanged=true;
                    if(decimal)
                        smallTextField.setText(value1+" "+operator);
                    else{
                        expression=(long) value1;
                        if(sqRt||power||sqpSqrt||sqrtSqp){
                            smallTextField.setText(sText+" "+text+" "+operator);
                            power=false;
                            sqRt=false;
                            sqpSqrt=false;
                            sqrtSqp=false;}
                        else
                            smallTextField.setText(expression+" "+operator);
                    }
                    jTextField1.setText("0");
                }
                case '-' -> {
                    if(equalsToButton) {equalsToButton=false; value1=0;}
                    String text=jTextField1.getText();
                    if(operatorChanged){
                        operator='-';
                        str=textFieldOperatorChanger(sText);
                        smallTextField.setText(""+str+operator);
                        return;
                    }
                    operatorChecker(text);
                    operator='-';
                    operatorChanged=true;
                    if(decimal)
                        smallTextField.setText(value1+" "+operator);
                    else{
                        expression=(long) value1;
                        if(sqRt||power||sqpSqrt||sqrtSqp){
                            smallTextField.setText(sText+" "+text+" "+operator);
                            power=false;
                            sqRt=false;
                            sqpSqrt=false;
                            sqrtSqp=false;}
                        else
                            smallTextField.setText(expression+" "+operator);
                    }
                    jTextField1.setText("0");
                }
                case '*' -> {
                    if(equalsToButton) {equalsToButton=false; value1=0;}
                    if(errorSolvedInMultiplication){if(value1==0)value1=1; errorSolvedInMultiplication=false;}
                    String text=jTextField1.getText();
                    if(operatorChanged){
                        operator='x';
                        str=textFieldOperatorChanger(sText);
                        smallTextField.setText(""+str+operator);
                        return;
                    }
                    operatorChecker(text);
                    operator='x';
                    operatorChanged=true;
                    if(decimal)
                        smallTextField.setText(value1+" "+operator);
                    else{
                        expression=(long) value1;
                        if(sqRt||power||sqpSqrt||sqrtSqp){
                            smallTextField.setText(sText+" "+text+" "+operator);
                            power=false;
                            sqRt=false;
                            sqpSqrt=false;
                            sqrtSqp=false;}
                        else
                            smallTextField.setText(expression+" "+operator);
                    }
                    jTextField1.setText("0");
                }
                case '/' -> {
                    if(equalsToButton) {equalsToButton=false; value1=0;}
                    String text=jTextField1.getText();
                    if(operatorChanged){
                        operator='÷';
                        str=textFieldOperatorChanger(sText);
                        smallTextField.setText(""+str+operator);
                        return;
                    }
                    operatorChecker(text);
                    operator='÷';
                    operatorChanged=true;
                    if(decimal)
                        smallTextField.setText(value1+" "+operator);
                    else{
                        expression=(long) value1;
                        if(sqRt||power||sqpSqrt||sqrtSqp){
                            smallTextField.setText(sText+" "+text+" "+operator);
                            power=false;
                            sqRt=false;
                            sqpSqrt=false;
                            sqrtSqp=false;}
                        else
                            smallTextField.setText(expression+" "+operator);
                    }
                    jTextField1.setText("0");
                }
                case '.' -> {
                    if(operatorChanged)
                        operatorChanged=false;
                    if(!power){
                        if(equalsToButton){
                            jTextField1.setText("");
                            equalsToButton=false;
                        }
                        String text=jTextField1.getText();

                        if(text.contains(".")){
                            jTextField1.setText(text);
                            decimal=true;
                        } else {
                            jTextField1.setText(text+".");
                            decimal=true;
                        }
                    }
                }
            }
        }
        
        //          BACKSPACE
        else if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_BACK_SPACE){
            if(zeroErrorRatio){
                jTextField1.setText("0");
                zeroErrorRatio=false;
                ratioDisabledOption(true);
            }
            if(equalsToButton) {equalsToButton=false; value1=0; smallTextField.setText(""); jTextField1.setText("0");}
            String text=jTextField1.getText();
            if(!"0".equals(text)){
                Action beep = jTextField1.getActionMap().get(javax.swing.text.DefaultEditorKit.deletePrevCharAction);
                beep.setEnabled(false);
            }
            else{
                Action beep = jTextField1.getActionMap().get(javax.swing.text.DefaultEditorKit.deletePrevCharAction);
                beep.setEnabled(true);return;}
            str=eraseRemover(text);
            jTextField1.setText(str);
            if(text.contains("-")){if(str.length()==1)jTextField1.setText("0");  plusMinus=false;   }
        }
        
        //          PERCENTAGE
        else if(ch=='%'){
            double temp=0;
            if(value1!=0){
                String text=jTextField1.getText();
                if(sqrtSqp){
                    str=lastCharacterRemover(text);
                    temp= Math.pow(Math.sqrt(Double.parseDouble(str)), 2);
                    temp/=100;
                    power=false;
                    sqRt=false;
                }
                else if(sqpSqrt){
                    str=lastCharacterRemover(text);
                    temp= Math.sqrt(Math.pow(Double.parseDouble(str), 2));
                    temp/=100;
                    power=false;
                    sqRt=false;
                }
                else if(power){
                    str=lastCharacterRemover(text);
                    temp= Math.pow(Double.parseDouble(str), 2);
                    temp/=100;
                    power=false;
                }
                else if(sqRt){
                    str=lastCharacterRemover(text);
                    temp= Math.sqrt(Double.parseDouble(str));
                    temp/=100;
                    sqRt=false;
                }
                else
                    temp=Double.parseDouble(text)/100;
                BigDecimal b1;
                b1= new BigDecimal(temp);
                if(b1.precision()>7){
                    jTextField1.setText(String.format("%.7f", temp));
                }
                else{
                    jTextField1.setText(""+temp);
                }
                decimal=true;
            }
            else if(value1==0){
                jTextField1.setText("0");
            }
            power=false;
            sqRt=false;
        }
        
        //          WHEN OTHER KEYS PRESSED, BEEP SOUND GENERATED
        else{
            java.awt.Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_jTextField1KeyPressed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        // TODO add your handling code here:
        try{
            colorChanger();
        }
        catch(Exception ex){
        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed
    /**
     * @param args the command line arguments
     */
    
    private void equalsToButton(){
        if(equalsToButton){
                jTextField1.setText("");
                smallTextField.setText("");
                equalsToButton=false;
                value1=0;
                errorSolvedInMultiplication=true;
                decimal=false;
            }
    }
    
    private void numberInput(String s, String text){
        if("0".equals(text)||"".equals(text)){
                jTextField1.setText(s);
            } else {
                jTextField1.setText(text+s);
            }
    }
    
    private void clear(){
        ratioDisabledOption(true);
        operatorChanged=false;
        zeroErrorRatio=false;
        sqpSqrt=false;
        sqrtSqp=false;
        decimal=false;
        power=false;
        plusMinus=false;
        sqRt=false;
        jTextField1.setText("0");
    }
    
    private void operatorChecker(String text){
        if(value1!=0){
            switch(operator){
                case '+':
                    if(power){
                        str=lastCharacterRemover(text);
                        value1+= Math.pow(Double.parseDouble(str), 2);
//                        power=false;
                    }
                    else if(sqRt){
                        str=lastCharacterRemover(text);
                        value1+= Math.sqrt(Double.parseDouble(str));
//                        sqRt=false;
                    }
                    else
                        if((Double.parseDouble(text)%1)!=0)
                            value1+= (long)Double.parseDouble(text);
                        else
                            value1+=Double.parseDouble(text);
                    break;
                case '-':
                    if(power){
                        str=lastCharacterRemover(text);
                        value1-= Math.pow(Double.parseDouble(str), 2);
//                        power=false;
                    }
                    else if(sqRt){
                        str=lastCharacterRemover(text);
                        value1-= Math.sqrt(Double.parseDouble(str));
//                        sqRt=false;
                    }
                    else
                        value1-=Double.parseDouble(text);
                    break;
                case 'x':
                    if(power){
                        str=lastCharacterRemover(text);
                        value1*=  Math.pow(Double.parseDouble(str), 2);
//                        power=false;
                    }
                    else if(sqRt){
                        str=lastCharacterRemover(text);
                        value1*= Math.sqrt(Double.parseDouble(str));
//                        sqRt=false;
                    }
                    else
                        value1*=Double.parseDouble(text);
                    break;
                case '÷':
                    if(power){
                        str=lastCharacterRemover(text);
                        value1/=  Math.pow(Double.parseDouble(str), 2);
//                        power=false;
                    }
                    else if(sqRt){
                        str=lastCharacterRemover(text);
                        value1/= Math.sqrt(Double.parseDouble(str));
//                        sqRt=false;
                    }
                    else
                        value1/=Double.parseDouble(text);
                    break;
                default:
                    if(power){
                        str=lastCharacterRemover(text);
                        value1=  Math.pow(Double.parseDouble(str), 2);
//                        power=false;
                    }
                    else if(sqRt){
                        str=lastCharacterRemover(text);
                        value1=  Math.sqrt(Double.parseDouble(str));
//                        sqRt=false;
                    }
            }
        }
        else{
            if(power){
                str=lastCharacterRemover(text);
                value1=  Math.pow(Double.parseDouble(str), 2);
//                power=false;
            }
            else if(sqRt){
                str=lastCharacterRemover(text);
                value1=  Math.sqrt(Double.parseDouble(str));
//                sqRt=false;
            }
            else{
                value1=Double.parseDouble(text);
//                smallTextField.setText(""+value1);
            }
        }
    }
    private String lastCharacterRemover(String text){
        String[] strSplit=text.split("");
        ArrayList<String>  strlist=new ArrayList<>(Arrays.asList(strSplit));
        if(sqrtSqp||sqpSqrt){
            strlist.remove(strlist.size()-1);
            strlist.remove(strlist.size()-1);
            strlist.remove(strlist.size()-1);
            strlist.remove(strlist.get(0));
            strlist.remove(strlist.get(0));
            strlist.remove(strlist.get(0));
        }
        else if(power){
            strlist.remove(strlist.size()-1);
            strlist.remove(strlist.size()-1);
            strlist.remove(strlist.get(0));
        }
        else if(sqRt){
            strlist.remove(strlist.size()-1);
            strlist.remove(strlist.get(0));
            strlist.remove(strlist.get(0));
        }
        else{
            if(strlist.size()==1){
                strlist.remove(strlist.size()-1);
                strlist.add("0");
            }
            else
                strlist.remove(strlist.size()-1);
                
        }
        str="";
        for (String temp : strlist) {
            str+= temp;
        }
        return str;
    }
    
    private void equalsToCalculation(){
        double res=0;
        if(decimal){
            switch(operator){
                case '+':
                    if(sqrtSqp){
                        result= Math.sqrt(value2);
                        result= Math.pow(result, 2);
                        result=value1+result;
                        BigDecimal b1;
                        b1= new BigDecimal(result);
                        if(b1.precision()>7){
                            jTextField1.setText(String.format("%.7f", result));
                        }
                        else{
                            jTextField1.setText(""+result);
                        }
//                        sqpSqrt=false;
                    }
                    else if(sqpSqrt){
                        result= Math.pow(value2, 2);
                        result= Math.sqrt(result);
                        result= value1+result;
                        BigDecimal b1;
                        b1= new BigDecimal(result);
                        if(b1.precision()>7){
                            jTextField1.setText(String.format("%.7f", result));return;
                        }
//                        else{
//                            jTextField1.setText(""+result);
//                        }
//                        sqrtSqp=false;
                    }
                    else if(power){
                        result=value1+ Math.pow(value2, 2);
                        BigDecimal b1;
                        b1= new BigDecimal(result);
                        if(b1.precision()>7){
                            jTextField1.setText(String.format("%.7f", result));return;
                        }
//                        else{
//                            jTextField1.setText(""+result);
//                        }
//                        power=false;
                    }
                    else if(sqRt){
                        result=value1+ Math.sqrt(value2);
                        BigDecimal b1;
                        b1= new BigDecimal(result);
                        if(b1.precision()>7){
                            jTextField1.setText(String.format("%.7f", result));return;
                        }
//                        else{
//                            jTextField1.setText(""+result);
//                        }
//                        sqRt=false;
                    }
                    else{
                        result=value1+value2;
                        BigDecimal b1;
                        b1= new BigDecimal(result);
                        if(b1.precision()>7){
                            jTextField1.setText(String.format("%.7f", result));return;
                        }
//                        else{
//                            jTextField1.setText(""+result);
//                        }
                        break;
                    }
                case '-':
                    if(sqrtSqp){
                        result= Math.sqrt(value2);
                        result= Math.pow(result, 2);
                        result=value1-result;
                        BigDecimal b1;
                        b1= new BigDecimal(result);
                        if(b1.precision()>7){
                            jTextField1.setText(String.format("%.7f", result));return;
                        }
//                        else{
//                            jTextField1.setText(""+result);
//                        }
//                        sqpSqrt=false;
                    }
                    else if(sqpSqrt){
                        result= Math.pow(value2, 2);
                        result= Math.sqrt(result);
                        result= value1-result;
                        BigDecimal b1;
                        b1= new BigDecimal(result);
                        if(b1.precision()>7){
                            jTextField1.setText(String.format("%.7f", result));return;
                        }
//                        else{
//                            jTextField1.setText(""+result);
//                        }
//                        sqrtSqp=false;
                    }
                    else if(power){
                        result=value1- Math.pow(value2, 2);
                        BigDecimal b1;
                        b1= new BigDecimal(result);
                        if(b1.precision()>7){
                            jTextField1.setText(String.format("%.7f", result));return;
                        }
//                        else{
//                            jTextField1.setText(""+result);
//                        }
//                        power=false;
                    }
                    else if(sqRt){
                        result=value1- Math.sqrt(value2);
                        BigDecimal b1;
                        b1= new BigDecimal(result);
                        if(b1.precision()>7){
                            jTextField1.setText(String.format("%.7f", result));return;
                        }
//                        else{
//                            jTextField1.setText(""+result);
//                        }
//                        sqRt=false;
                    }
                    else{
                        result=value1-value2;
                        BigDecimal b1;
                        b1= new BigDecimal(result);
                        if(b1.precision()>7){
                            jTextField1.setText(String.format("%.7f", result));return;
                        }
//                        else{
//                            jTextField1.setText(""+result);
//                        }
                    }
                    break;
                case 'x':
                    if(sqrtSqp){
                        result= Math.sqrt(value2);
                        result= Math.pow(result, 2);
                        result=value1*result;
                        BigDecimal b1;
                        b1= new BigDecimal(result);
                        if(b1.precision()>7){
                            jTextField1.setText(String.format("%.7f", result));return;
                        }
//                        else{
//                            jTextField1.setText(""+result);
//                        }
//                        sqpSqrt=false;
                    }
                    else if(sqpSqrt){
                        result= Math.pow(value2, 2);
                        result= Math.sqrt(result);
                        result= value1*result;
                        BigDecimal b1;
                        b1= new BigDecimal(result);
                        if(b1.precision()>7){
                            jTextField1.setText(String.format("%.7f", result));return;
                        }
//                        else{
//                            jTextField1.setText(""+result);
//                        }
//                        sqrtSqp=false;
                    }
                    else if(power){
                        result=value1* Math.pow(value2, 2);
                        BigDecimal b1;
                        b1= new BigDecimal(result);
                        if(b1.precision()>7){
                            jTextField1.setText(String.format("%.7f", result));return;
                        }
//                        else{
//                            jTextField1.setText(""+result);
//                        }
//                        power=false;
                    }
                    else if(sqRt){
                        result=value1* Math.sqrt(value2);
                        BigDecimal b1;
                        b1= new BigDecimal(result);
                        if(b1.precision()>7){
                            jTextField1.setText(String.format("%.7f", result));return;
                        }
//                        else{
//                            jTextField1.setText(""+result);
//                        }
//                        sqRt=false;
                    }
                    else{
                        result=value1*value2;
                        BigDecimal b1;
                        b1= new BigDecimal(result);
                        if(b1.precision()>7){
                            jTextField1.setText(String.format("%.7f", result));return;
                        }
//                        else{
//                            jTextField1.setText(""+result);
//                        }
                    }
                    break;
                case '÷':
                    if(sqrtSqp){
                        result= Math.sqrt(value2);
                        result= Math.pow(result, 2);
                        result=value1/result;
                        BigDecimal b1;
                        b1= new BigDecimal(result);
                        if(b1.precision()>7){
                            jTextField1.setText(String.format("%.7f", result));return;
                        }
//                        else{
//                            jTextField1.setText(""+result);
//                        }
//                        sqpSqrt=false;
                    }
                    else if(sqpSqrt){
                        result= Math.pow(value2, 2);
                        result= Math.sqrt(result);
                        result= value1/result;
                        BigDecimal b1;
                        b1= new BigDecimal(result);
                        if(b1.precision()>7){
                            jTextField1.setText(String.format("%.7f", result));return;
                        }
//                        else{
//                            jTextField1.setText(""+result);
//                        }
//                        sqrtSqp=false;
                    }
                    else if(power){
                        result=value1/ Math.pow(value2, 2);
                        BigDecimal b1;
                        b1= new BigDecimal(result);
                        if(b1.precision()>7){
                            jTextField1.setText(String.format("%.7f", result));return;
                        }
//                        else{
//                            jTextField1.setText(""+result);
//                        }
//                        power=false;
                    }
                    else if(sqRt){
                        result=value1/ Math.sqrt(value2);
                        BigDecimal b1;
                        b1= new BigDecimal(result);
                        if(b1.precision()>7){
                            jTextField1.setText(String.format("%.7f", result));return;
                        }
//                        else{
//                            jTextField1.setText(""+result);
//                        }
//                        sqRt=false;
                    }
                    else{
                        result=value1/value2;
                        BigDecimal b1;
                        b1= new BigDecimal(result);
                        if(b1.precision()>7){
                            jTextField1.setText(String.format("%.7f", result));return;
                        }
//                        else{
//                            jTextField1.setText(""+result);
//                        }
                    }
                    break;
                default:
                    if(sqrtSqp){
                        result= Math.sqrt(value2);
                        result= Math.pow(result, 2);
                        BigDecimal b1;
                        b1= new BigDecimal(result);
                        if(b1.precision()>7){
                            jTextField1.setText(String.format("%.7f", result));return;
                        }
//                        else{
//                            jTextField1.setText(""+result);
//                        }
//                        sqpSqrt=false;
                    }
                    else if(sqpSqrt){
                        result= Math.pow(value2, 2);
                        result= Math.sqrt(result);
                        BigDecimal b1;
                        b1= new BigDecimal(result);
                        if(b1.precision()>7){
                            jTextField1.setText(String.format("%.7f", result));return;
                        }
//                        else{
//                            jTextField1.setText(""+result);
//                        }
//                        sqrtSqp=false;
                    }
                    else if(power){
                        result= Math.pow(value2, 2);
                        BigDecimal b1;
                        b1= new BigDecimal(result);
                        if(b1.precision()>7){
                            jTextField1.setText(String.format("%.7f", result));return;
                        }
//                        else{
//                            jTextField1.setText(""+result);
//                        }
//                        power=false;
                    }
                    else if(sqRt){
                        result= Math.sqrt(value2);
                        BigDecimal b1;
                        b1= new BigDecimal(result);
                        if(b1.precision()>7){
                            jTextField1.setText(String.format("%.7f", result));return;
                        }
//                        else{
//                            jTextField1.setText(""+result);
//                        }
//                        sqRt=false;
                    }
            }
            if("Infinity".equals(String.valueOf(result))){
                jTextField1.setText("Cannot divide by zero");
                zeroErrorRatio=true;
                ratioDisabledOption(false);
                colorChanger();
                decimal=false;
            }
            else
                jTextField1.setText(""+result);
        }
        else{
            long result=0;
            switch(operator){
                case '+':
                    if(sqrtSqp){
                        result= (long) Math.sqrt(value2);
                        result= (long) Math.pow(result, 2);
                        result=(long) (value1+result);
//                        jTextField1.setText(""+result);
//                        sqpSqrt=false;
                    }
                    else if(sqpSqrt){
                        result= (long) Math.pow(value2, 2);
                        result= (long) Math.sqrt(result);
                        result=(long) (value1+result);
//                        jTextField1.setText(""+result);
//                        sqrtSqp=false;
                    }
                    else if(power){
                        result=(long)value1+ (long)Math.pow(value2, 2);
                        limit=String.valueOf(result);
                        if(limit.length()>14){
                            jTextField1.setText("Error! Limit Exceeded");
                            zeroErrorRatio=true;
                            ratioDisabledOption(false);
                            colorChanger();
                            return;
                        }
//                        else
//                            jTextField1.setText(""+result);
//                        power=false;
                    }
                    else if(sqRt){
                        if((Math.sqrt(value2)%1)!=0){
                            res=value1+Math.sqrt(value2);
                            if("Infinity".equals(String.valueOf(res))){
                            }
                            else{
                                jTextField1.setText(""+res);return;}
//                            jTextField1.setText(""+res);
                        }
                        else{
                            result= (long) (value1+ Math.sqrt(value2));
//                            jTextField1.setText(""+result);
                        }
                    }
                    else{
                        result=(long) (value1+value2);
                        limit=String.valueOf(result);
                        if(limit.length()>14){
                            jTextField1.setText("Error! Limit Exceeded");
                            zeroErrorRatio=true;
                            ratioDisabledOption(false);
                            colorChanger();
                            return;
                        }
//                        else{
//                            jTextField1.setText(""+result);
//                        }
                    }
                    break;
                case '-':
                    if(sqrtSqp){
                        result= (long) Math.sqrt(value2);
                        result= (long) Math.pow(result, 2);
                        result=(long) (value1-result);
//                        jTextField1.setText(""+result);
//                        sqpSqrt=false;
                    }
                    else if(sqpSqrt){
                        result= (long) Math.pow(value2, 2);
                        result= (long) Math.sqrt(result);
                        result=(long) (value1-result);
//                        jTextField1.setText(""+result);
//                        sqrtSqp=false;
                    }
                    else if(power){
                        result=(long)value1- (long)Math.pow(value2, 2);
//                        jTextField1.setText(""+result);
//                        power=false;
                    }
                    else if(sqRt){
                        if((Math.sqrt(value2)%1)!=0){
                            res=value1-Math.sqrt(value2);
                            if("Infinity".equals(String.valueOf(res))){
                            }
                            else{
                                jTextField1.setText(""+res);return;}
//                            jTextField1.setText(""+res);
                        }
                        else{
                            result= (long) (value1-Math.sqrt(value2));
//                            jTextField1.setText(""+result);
                        }
                    }
                    else{
                        result=(long) (value1-value2);
//                        jTextField1.setText(""+result);
                    }
                    break;
                case 'x':
                    if(sqrtSqp){
                        result= (long) Math.sqrt(value2);
                        result= (long) Math.pow(result, 2);
                        result=(long) (value1*result);
//                        jTextField1.setText(""+result);
//                        sqpSqrt=false;
                    }
                    else if(sqpSqrt){
                        result= (long) Math.pow(value2, 2);
                        result= (long) Math.sqrt(result);
                        result=(long) (value1*result);
//                        jTextField1.setText(""+result);
//                        sqrtSqp=false;
                    }
                    else if(power){
                        result=(long)value1* (long)Math.pow(value2, 2);
//                        jTextField1.setText(""+result);
//                        power=false;
                    }
                    else if(sqRt){
                        if((Math.sqrt(value2)%1)!=0){
                            res=value1*Math.sqrt(value2);
                            if("Infinity".equals(String.valueOf(res))){
                            }
                            else{
                                jTextField1.setText(""+res);return;}
//                            jTextField1.setText(""+res);
                        }
                        else{
                            result= (long) (value1* Math.sqrt(value2));
//                            jTextField1.setText(""+result);
                        }
                    }
                    else{
                        result=(long) (value1*value2);
                        limit=String.valueOf(result);
                        if(limit.length()>14){
                            jTextField1.setText("Error! Limit Exceeded");
                            zeroErrorRatio=true;
                            ratioDisabledOption(false);
                            colorChanger();
                            return;
                        }
//                        else{
//                            jTextField1.setText(""+result);
//                        }
                    }
                    break;
                case '÷':
                    if(sqrtSqp){
                        result= (long) Math.sqrt(value2);
                        result= (long) Math.pow(result, 2);
                        result=(long) (value1/result);
//                        jTextField1.setText(""+result);
//                        sqpSqrt=false;
                    }
                    else if(sqpSqrt){
                        result= (long) Math.pow(value2, 2);
                        result= (long) Math.sqrt(result);
                        result=(long) (value1/result);
//                        jTextField1.setText(""+result);
//                        sqrtSqp=false;
                    }
                    else if(power){
                        result=(long)value1/ (long)Math.pow(value2, 2);
                        limit=String.valueOf(result);
                        if(limit.length()>14){
                            jTextField1.setText("Error! Limit Exceeded");
                            zeroErrorRatio=true;
                            ratioDisabledOption(false);
                            colorChanger();
                            return;
                        }
//                        else
//                            jTextField1.setText(""+result);
//                        power=false;
                        
                    }
                    else if(sqRt){
                        if((Math.sqrt(value2)%1)!=0){
                            res=value1/Math.sqrt(value2);
                            if("Infinity".equals(String.valueOf(res))){
                            }
                            else{
                                jTextField1.setText(""+res);return;}
//                            jTextField1.setText(""+res);
                        }
                        else{
                            result= (long) (value1/ Math.sqrt(value2));
//                            jTextField1.setText(""+result);
                        }
                    }
                    else{
                        res=(value1/value2);
                        if("Infinity".equals(String.valueOf(res))){
                        }
                        else{
                            jTextField1.setText(""+res);return;}
//                        jTextField1.setText(""+res);
                    }
                    break;
                default:
                    if(sqrtSqp){
                        result= (long) Math.sqrt(value2);
                        result= (long) Math.pow(result, 2);
//                        jTextField1.setText(""+result);
//                        sqpSqrt=false;
                    }
                    else if(sqpSqrt){
                        result= (long) Math.pow(value2, 2);
                        result= (long) Math.sqrt(result);
//                        jTextField1.setText(""+result);
//                        sqrtSqp=false;
                    }
                    else if(power){
                        result=(long) Math.pow(value2, 2);
                        limit=String.valueOf(result);
                        if(limit.length()>14){
                            jTextField1.setText("Error! Limit Exceeded");
                            zeroErrorRatio=true;
                            ratioDisabledOption(false);
                            colorChanger();
                            return;
                        }
//                        else
//                            jTextField1.setText(""+result);
//                        power=false;
                    }
                    else if(sqRt){
                        if((Math.sqrt(value2)%1)!=0)
                            jTextField1.setText(""+Math.sqrt(value2));
                        else{
                            result= (long) Math.sqrt(value2);
//                            jTextField1.setText(""+result);
                        }
//                        sqRt=false;
                    }
              }
            if("Infinity".equals(String.valueOf(result))||"Infinity".equals(String.valueOf(res))){
                jTextField1.setText("Cannot divide by zero");
                zeroErrorRatio=true;
                ratioDisabledOption(false);
                colorChanger();
                decimal=false;
            }
            else
                jTextField1.setText(""+result);
        }
    }
    private String eraseRemover(String text){
        String[] strSplit=text.split("");
        ArrayList<String>  strlist=new ArrayList<>(Arrays.asList(strSplit));
        if(sqpSqrt){
            strlist.remove(strlist.size()-1);
            strlist.remove(strlist.get(0));
            strlist.remove(strlist.get(0));
            sqpSqrt=false;
            sqRt=false;
        }
        else if(sqrtSqp){
            strlist.remove(strlist.size()-1);
            strlist.remove(strlist.size()-1);
            strlist.remove(strlist.get(0));
            sqrtSqp=false;
            power=false;
        }
        else if(power){
            strlist.remove(strlist.size()-1);
            strlist.remove(strlist.size()-1);
            strlist.remove(strlist.get(0));
            power=false;
        }
        else if(sqRt){
            strlist.remove(strlist.size()-1);
            strlist.remove(strlist.get(0));
            strlist.remove(strlist.get(0));
            sqRt=false;
        }
        else{
            if(strlist.size()==1){
                strlist.remove(strlist.size()-1);
                strlist.add("0");
            }
            else
                strlist.remove(strlist.size()-1);
                
        }
        str="";
        for (String temp : strlist) {
            str+= temp;
        }
        if(decimal)
            if(!str.contains("."))
                decimal=false;
        return str;
    }
    private void ratioDisabledOption(Boolean bool){
        btnDivide.setEnabled(bool);
        btnMultiply.setEnabled(bool);
        btnPlus.setEnabled(bool);
        btnMinus.setEnabled(bool);
        btnSquare.setEnabled(bool);
        btnsqrt.setEnabled(bool);
        btnper.setEnabled(bool);
        btnplusminus.setEnabled(bool);
        btnratio.setEnabled(bool);
        btnDecimal.setEnabled(bool);
        btnEqualsTo.setEnabled(bool);
    }
    
    private void colorChanger(){
        btnDivide.setUI(new MetalButtonUI() {
            @Override
            protected Color getDisabledTextColor() {
                return Color.DARK_GRAY;
            }
        });
        btnMultiply.setUI(new MetalButtonUI() {
            @Override
            protected Color getDisabledTextColor() {
                return Color.DARK_GRAY;
            }
        });
        btnPlus.setUI(new MetalButtonUI() {
            @Override
            protected Color getDisabledTextColor() {
                return Color.DARK_GRAY;
            }
        });
        btnMinus.setUI(new MetalButtonUI() {
            @Override
            protected Color getDisabledTextColor() {
                return Color.DARK_GRAY;
            }
        });
        btnSquare.setUI(new MetalButtonUI() {
            @Override
            protected Color getDisabledTextColor() {
                return Color.DARK_GRAY;
            }
        });
        btnsqrt.setUI(new MetalButtonUI() {
            @Override
            protected Color getDisabledTextColor() {
                return Color.DARK_GRAY;
            }
        });
        btnper.setUI(new MetalButtonUI() {
            @Override
            protected Color getDisabledTextColor() {
                return Color.DARK_GRAY;
            }
        });
        btnplusminus.setUI(new MetalButtonUI() {
            @Override
            protected Color getDisabledTextColor() {
                return Color.DARK_GRAY;
            }
        });
        btnratio.setUI(new MetalButtonUI() {
            @Override
            protected Color getDisabledTextColor() {
                return Color.DARK_GRAY;
            }
        });
        btnDecimal.setUI(new MetalButtonUI() {
            @Override
            protected Color getDisabledTextColor() {
                return Color.DARK_GRAY;
            }
        });
        btnEqualsTo.setUI(new MetalButtonUI() {
            @Override
            protected Color getDisabledTextColor() {
                return Color.DARK_GRAY;
            }
        });
        btnC.setUI(new MetalButtonUI() {
            @Override
            protected Color getDisabledTextColor() {
                return Color.DARK_GRAY;
            }
        });
        btnCE.setUI(new MetalButtonUI() {
            @Override
            protected Color getDisabledTextColor() {
                return Color.DARK_GRAY;
            }
        });
        btnErase.setUI(new MetalButtonUI() {
            @Override
            protected Color getDisabledTextColor() {
                return Color.DARK_GRAY;
            }
        });
        btn0.setUI(new MetalButtonUI() {
            @Override
            protected Color getDisabledTextColor() {
                return Color.DARK_GRAY;
            }
        });
        btn1.setUI(new MetalButtonUI() {
            @Override
            protected Color getDisabledTextColor() {
                return Color.DARK_GRAY;
            }
        });
        btn2.setUI(new MetalButtonUI() {
            @Override
            protected Color getDisabledTextColor() {
                return Color.DARK_GRAY;
            }
        });
        btn3.setUI(new MetalButtonUI() {
            @Override
            protected Color getDisabledTextColor() {
                return Color.DARK_GRAY;
            }
        });
        btn4.setUI(new MetalButtonUI() {
            @Override
            protected Color getDisabledTextColor() {
                return Color.DARK_GRAY;
            }
        });
        btn5.setUI(new MetalButtonUI() {
            @Override
            protected Color getDisabledTextColor() {
                return Color.DARK_GRAY;
            }
        });
        btn6.setUI(new MetalButtonUI() {
            @Override
            protected Color getDisabledTextColor() {
                return Color.DARK_GRAY;
            }
        });
        btn7.setUI(new MetalButtonUI() {
            @Override
            protected Color getDisabledTextColor() {
                return Color.DARK_GRAY;
            }
        });
        btn8.setUI(new MetalButtonUI() {
            @Override
            protected Color getDisabledTextColor() {
                return Color.DARK_GRAY;
            }
        });
        btn9.setUI(new MetalButtonUI() {
            @Override
            protected Color getDisabledTextColor() {
                return Color.DARK_GRAY;
            }
        });
    }
    
    private String textFieldOperatorChanger(String Text){
        String[] strSplit=Text.split("");
        ArrayList<String>  strlist=new ArrayList<>(Arrays.asList(strSplit));
        strlist.remove(strlist.size()-1);
        str="";
        for (String temp : strlist) {
            str+= temp;
        }
        return str;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Panel1;
    private javax.swing.JButton btn0;
    private javax.swing.JButton btn1;
    private javax.swing.JButton btn2;
    private javax.swing.JButton btn3;
    private javax.swing.JButton btn4;
    private javax.swing.JButton btn5;
    private javax.swing.JButton btn6;
    private javax.swing.JButton btn7;
    private javax.swing.JButton btn8;
    private javax.swing.JButton btn9;
    private javax.swing.JButton btnC;
    private javax.swing.JButton btnCE;
    private javax.swing.JButton btnDecimal;
    private javax.swing.JButton btnDivide;
    private javax.swing.JButton btnEqualsTo;
    private javax.swing.JButton btnErase;
    private javax.swing.JButton btnMinus;
    private javax.swing.JButton btnMultiply;
    private javax.swing.JButton btnPlus;
    private javax.swing.JButton btnSquare;
    private javax.swing.JButton btnper;
    private javax.swing.JButton btnplusminus;
    private javax.swing.JButton btnratio;
    private javax.swing.JButton btnsqrt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JTextField smallTextField;
    // End of variables declaration//GEN-END:variables
}